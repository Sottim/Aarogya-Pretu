"""Manual creation of medical history tables

Revision ID: 06a6a727bdf4
Revises: b314006082c6
Create Date: 2025-04-06 17:23:38.715428

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '06a6a727bdf4'
down_revision = 'a002f4389768' # Point to the previous (empty) migration
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Manually added based on app/models.py
    op.create_table('past_illness',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('illness_name_encrypted', sa.LargeBinary(), nullable=False),
        sa.Column('diagnosis_date_encrypted', sa.LargeBinary(), nullable=True),
        sa.Column('details_encrypted', sa.LargeBinary(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('past_illness', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_past_illness_user_id'), ['user_id'], unique=False)

    op.create_table('surgery',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('surgery_name_encrypted', sa.LargeBinary(), nullable=False),
        sa.Column('surgery_date_encrypted', sa.LargeBinary(), nullable=True),
        sa.Column('details_encrypted', sa.LargeBinary(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('surgery', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_surgery_user_id'), ['user_id'], unique=False)

    op.create_table('allergy',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('allergen_encrypted', sa.LargeBinary(), nullable=False),
        sa.Column('severity_encrypted', sa.LargeBinary(), nullable=True),
        sa.Column('reaction_details_encrypted', sa.LargeBinary(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('allergy', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_allergy_user_id'), ['user_id'], unique=False)

    op.create_table('medication',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('medication_name_encrypted', sa.LargeBinary(), nullable=False),
        sa.Column('dosage_encrypted', sa.LargeBinary(), nullable=True),
        sa.Column('frequency_encrypted', sa.LargeBinary(), nullable=True),
        sa.Column('start_date_encrypted', sa.LargeBinary(), nullable=True),
        sa.Column('end_date_encrypted', sa.LargeBinary(), nullable=True),
        sa.Column('reason_encrypted', sa.LargeBinary(), nullable=True),
        sa.Column('is_current', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('medication', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_medication_is_current'), ['is_current'], unique=False)
        batch_op.create_index(batch_op.f('ix_medication_user_id'), ['user_id'], unique=False)

    op.create_table('immunization',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('vaccine_name_encrypted', sa.LargeBinary(), nullable=False),
        sa.Column('date_received_encrypted', sa.LargeBinary(), nullable=True),
        sa.Column('details_encrypted', sa.LargeBinary(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('immunization', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_immunization_user_id'), ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Manually added drop table commands
    with op.batch_alter_table('immunization', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_immunization_user_id'))
    op.drop_table('immunization')

    with op.batch_alter_table('medication', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_medication_user_id'))
        batch_op.drop_index(batch_op.f('ix_medication_is_current'))
    op.drop_table('medication')

    with op.batch_alter_table('allergy', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_allergy_user_id'))
    op.drop_table('allergy')

    with op.batch_alter_table('surgery', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_surgery_user_id'))
    op.drop_table('surgery')

    with op.batch_alter_table('past_illness', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_past_illness_user_id'))
    op.drop_table('past_illness')
    # ### end Alembic commands ###
